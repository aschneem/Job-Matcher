"""Flask App"""
from threading import Thread
import json
from flask import Flask, request, abort, send_file, jsonify
from flask_cors import cross_origin
from repositories.job_post_mongo_repository import JobPostRepository
from repositories.resume_mongo_repository import ResumeRepository
from repositories.search_mongo_repository import SearchRepository
from matchers.entity_matcher import EntityMatcher
from matchers.matcher_engine import MatcherEngine
from matchers.keyword_vector_matcher import KeywordVectorMatcher
from matchers.tfidf_matcher import TfIdfMatcher
from matchers.pos_vector_matcher import PosVectorMatcher
from services.analyzer_service import AnalyzerService
from services.compare_resume_post_service import CompareResumePostService
from services.resume_service import ResumeService
from services.search_posts_service import SearchPostsService
from services.synonym_service import SynonymService


app = Flask(__name__)

post_repo = JobPostRepository()
resume_repo = ResumeRepository()
search_repo = SearchRepository()

matcher = MatcherEngine(
    [
        EntityMatcher(),
        KeywordVectorMatcher("rake_score", "rakeResults"),
        KeywordVectorMatcher('text_rank', 'text_rank', True),
        TfIdfMatcher(resume_repo, post_repo),
        PosVectorMatcher('VERB', 'verb_alignment'),
        PosVectorMatcher('NOUN', 'noun_alignment'),
        PosVectorMatcher('PROPN', 'pnoun_alignment'),
        PosVectorMatcher('ADJ', 'adjective_alignment'),
        PosVectorMatcher('ADV', 'adverb_alignment')
    ],
    post_repo,
    resume_repo)
analyzer_service = AnalyzerService()
resume_service = ResumeService(analyzer_service, matcher, resume_repo, SynonymService())
search_service = SearchPostsService(search_repo, post_repo, resume_repo, matcher, analyzer_service)
compare_service = CompareResumePostService(post_repo, resume_repo)

MAX_FILE_SIZE = 2
MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE / (1024 * 1024)

def get_post_sort_key():
    """Gets the sort key to use for post retrieval based on defaults"""
    default_resume = resume_repo.get_default_resume()
    default_matcher = matcher.get_default_score()
    return 'match_data.' + default_matcher + '.' + default_resume['name']

@app.route("/settings")
@cross_origin()
def settings():
    """Get the default setting for the application"""
    resume = resume_repo.get_default_resume()
    matcher_name = matcher.get_default_score()
    return { 'resume': resume['name'], 'matcher': matcher_name }

@app.route('/resume')
@cross_origin()
def get_all_resumes():
    """Retrieves all saved resumes"""
    return resume_repo.get_all_resumes()

@app.route("/resume/<name>")
@cross_origin()
def get_resume_data(name):
    """Get a particular resume"""
    if name == 'default':
        return resume_repo.get_default_resume()
    return resume_repo.get_resume_data(name)

@app.route("/resume/<name>/file")
@cross_origin()
def get_resume_file(name):
    """Get the pdf for a particular resume"""
    return send_file(resume_repo.get_resume_file(name), 'application/pdf')

@app.route('/resume/upload', methods=['POST'])
@cross_origin()
def upload_file():
    """Upload a new resume file"""
    if request.method == 'POST':
        file = request.files['file']
        filename = file.filename
        if file.content_length > MAX_FILE_SIZE:
            return abort(400, f'File size exceeds limit: {MAX_FILE_SIZE_BYTES} MB')
        file_data = file.read()
        result = resume_service.process_resume_file(filename, file_data)

        return result
    return abort(400, 'incorrect method')

@app.route("/resume/<name>/default")
@cross_origin()
def set_resume_default(name):
    """Set a new default resume"""
    resume_repo.set_default_resume(name)
    return resume_repo.get_default_resume()

@app.route("/jobpost")
@cross_origin()
def get_all_posts():
    """Get all job posts"""
    status = request.args.get('status')
    sort_key = get_post_sort_key()
    if status:
        return post_repo.get_all_posts_by_status(status, sort_key)
    return post_repo.get_all_posts(sort_key)

@app.route("/jobpost/<content_id>")
@cross_origin()
def get_post_data(content_id):
    """Get a particular job post"""
    return post_repo.get_post_data(content_id)

@app.route("/jobpost/<content_id>/view")
@cross_origin()
def get_post_html(content_id):
    """Get the HTML for a particular job post"""
    return post_repo.get_post_data(content_id)['html']

@app.route("/jobpost/s/<search_name>")
@cross_origin()
def get_posts_by_search(search_name):
    """Get the posts generated by a particular search"""
    sort_key = get_post_sort_key()
    return post_repo.get_posts_by_search_name(search_name, sort_key)

@app.route("/jobpost/<content_id>/status/<status>")
@cross_origin()
def update_post_status(content_id, status):
    """Update the status of a particular post"""
    return { 'result': post_repo.update_post(content_id, {'status': status})}

@app.route("/compare/<post_id>/<resume_name>")
@cross_origin()
def compare(post_id, resume_name):
    """Get comparison data between a post and resume"""
    return compare_service.compare(resume_name, post_id)


@app.route("/search")
@cross_origin()
def get_all_searches():
    """Get all saved search definitions"""
    return search_repo.get_search_configs()

@app.route("/search/<name>")
@cross_origin()
def get_search_config(name):
    """Get a particular search configuration"""
    return search_repo.get_search_config(name)

@app.route("/search/<name>/run")
@cross_origin()
def run_search(name):
    """Kick-off a run of a particular search in the background"""
    thread = Thread(target=run_search_async, args=(name,))
    thread.start()
    return {'status': 'started'}

@app.route("/search/run")
@cross_origin()
def run_all_searches():
    """Kick-off a run of all searches in the background"""
    thread = Thread(target=run_all_searches_async)
    thread.start()
    return {'status': 'started'}

@app.route('/search/upload', methods=['POST'])
@cross_origin()
def upload_search_file():
    """Upload a new search definition"""
    # Check if a file is uploaded
    if "file" not in request.files:
        return jsonify({"error": "No file uploaded!"}), 400
    file = request.files["file"]
    # Check if the file is JSON
    if not file.filename.endswith(".json"):
        return jsonify({"error": "Invalid file format. Only JSON files allowed!"}), 400
    try:
        # Read the JSON data
        data = json.load(file)
    except (json.JSONDecodeError, TypeError, OSError):
        return jsonify({"error": "Failed to read uploaded JSON file!"}), 400
    # Save the data to MongoDB
    success = search_repo.save_search(data['name'], data)
    if not success:
        return jsonify({"error", "Invalid data"}), 400
    return search_repo.get_search_config(data['name'])

def run_all_searches_async():
    """Run all searches"""
    configs = search_repo.get_search_configs()
    for config in configs:
        search_service.search_for_posts(config,
                                       ['software architect',
                                        'lead software engineer',
                                        'engineering manager'])

def run_search_async(name):
    """Run a particular search"""
    config = search_repo.get_search_config(name)
    search_service.search_for_posts(config,
                                   ['software architect',
                                    'lead software engineer',
                                    'engineering manager'])
